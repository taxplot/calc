{"version":3,"sources":["../../src/taxPayer.js","../../src/fetch-data/taxBrackets.js","../../src/fetch-data/taxValues.js","../../src/fetch-data/payrollRates.js","../../src/fetch-data/payrollTax.js","App.js","index.js"],"names":["TaxPayer","constructor","scenario","populated","Object","year","country","jurisdiction","taxType","filingType","filingStatus","deduction","income","this","taxBrackets","a","client","uri","cache","headers","authorization","token","onError","graphQLErrors","console","query","gql","variables","taxPayer","result","taxQLResult","taxValues","brackets","marginalRate","taxAmount","effectiveRate","taxableIncome","Math","bracket","payrollRates","payerType","payrollTax","payrollInfo","payrollObject","payrollItem","taxName","payrollTaxAmount","subtotal","App","useState","setBracket","setValues","setPayrollRates","payrollValues","setPayrollValues","useEffect","taxData","payrollItems","getData","JSON","stringify","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7fe60eee.chunk.js","sourcesContent":["export class TaxPayer {\n  constructor(scenario) {\n    const defaults = {\n      year: 2021,\n      country: 'us',\n      jurisdiction: 'federal',\n      taxType: 'income',\n      filingType: 'individual',\n      filingStatus: 'single',\n      deduction: null,\n      income: null\n    }\n    const populated = Object.assign(defaults, scenario)\n    for (const key in populated) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (populated.hasOwnProperty(key)) {\n        this[key] = populated[key]\n      }\n    }\n  }\n}\n","import { ApolloClient, InMemoryCache, gql } from '@apollo/client'\n\nconst taxBrackets = async (token, taxPayer) => {\n  const client = new ApolloClient({\n    uri: 'https://taxql.taxplot.com',\n    cache: new InMemoryCache(),\n    headers: {\n      authorization: token\n    },\n    onError: ({ networkError, graphQLErrors }) => {\n      console.log('graphQLErrors', graphQLErrors)\n      console.log('networkError', networkError)\n    }\n  })\n\n  const query = gql`\n    query GetRates(\n      $year: Int\n      $country: String\n      $filingType: String\n      $jurisdiction: String\n      $filingStatus: String\n      $taxType: String\n    ) {\n      taxbrackets(\n        year: $year\n        country: $country\n        filingType: $filingType\n        jurisdiction: $jurisdiction\n        filingStatus: $filingStatus\n        taxType: $taxType\n      ) {\n        taxRate {\n          amountsAbove\n          amountsNotMoreThan\n          plusAmount\n          rate\n        }\n      }\n    }\n  `\n  const taxQLResult = await client\n    .query({\n      query: query,\n      variables: {\n        year: taxPayer.year,\n        country: taxPayer.country,\n        filingType: taxPayer.filingType,\n        jurisdiction: taxPayer.jurisdiction,\n        filingStatus: taxPayer.filingStatus,\n        taxType: taxPayer.taxType\n      }\n    })\n    .then((result) => result.data.taxbrackets[0].taxRate)\n  // console.log(taxQLResult)\n  return await taxQLResult\n}\n\nexport { taxBrackets }\n","const taxValues = (brackets, taxPayer) => {\n  var marginalRate = 0\n  var taxAmount = 0\n  var effectiveRate = 0\n\n  if (!taxPayer.deduction) {\n    taxPayer.deduction = 0\n  }\n\n  const taxableIncome = Math.max(0, taxPayer.income - taxPayer.deduction)\n  brackets.forEach((bracket) => {\n    if (\n      taxableIncome > bracket.amountsAbove &&\n      (taxableIncome <= bracket.amountsNotMoreThan ||\n        !bracket.amountsNotMoreThan)\n    ) {\n      marginalRate = bracket.rate\n      taxAmount =\n        (taxableIncome - bracket.amountsAbove) * bracket.rate +\n        bracket.plusAmount\n      effectiveRate = taxAmount / taxPayer.income\n    }\n  })\n\n  return {\n    marginalRate: marginalRate,\n    taxAmount: taxAmount,\n    effectiveRate: effectiveRate\n  }\n}\n\nexport { taxValues }\n","import { ApolloClient, InMemoryCache, gql } from '@apollo/client'\n\nconst payrollRates = async (token, taxPayer, payerType) => {\n  const client = new ApolloClient({\n    uri: 'https://taxql.taxplot.com',\n    cache: new InMemoryCache(),\n    headers: {\n      authorization: token\n    },\n    onError: ({ networkError, graphQLErrors }) => {\n      console.log('graphQLErrors', graphQLErrors)\n      console.log('networkError', networkError)\n    }\n  })\n\n  const query = gql`\n    query GetPayrollRates(\n      $year: Int\n      $payerType: PayrollPayerType\n      $filingStatus: String\n      $country: String\n      $jurisdiction: String\n      $income: Float\n    ) {\n      payrolltax(\n        year: $year\n        payerType: $payerType\n        filingStatus: $filingStatus\n        country: $country\n        jurisdiction: $jurisdiction\n        income: $income\n      ) {\n        wageBase\n        additionalHIThreshold\n        payrollTax {\n          name\n          payer\n          rate\n          amount\n        }\n      }\n    }\n  `\n  const taxQLResult = await client\n    .query({\n      query: query,\n      variables: {\n        year: taxPayer.year,\n        payerType: payerType ? payerType.toUpperCase() : 'BOTH',\n        filingStatus: taxPayer.filingStatus,\n        country: taxPayer.country,\n        jurisdiction: taxPayer.jurisdiction,\n        income: taxPayer.income\n      }\n    })\n    .then((result) => result.data.payrolltax)\n  return await taxQLResult\n}\n\nexport { payrollRates }\n","const payrollTax = (payrollInfo, taxPayer) => {\n  const payrollObject = {}\n  let payrollTaxAmount\n  payrollInfo.payrollTax.forEach((payrollItem) => {\n    if (payrollItem.name) {\n      let taxName = payrollItem.name\n      // calculate tax amount\n      if (taxName === 'OASDI') {\n        payrollTaxAmount =\n          payrollItem.rate * Math.min(payrollInfo.wageBase, taxPayer.income)\n      } else if (taxName === 'HI') {\n        payrollTaxAmount = payrollItem.rate * taxPayer.income\n      } else {\n        payrollTaxAmount =\n          payrollObject.HI[payrollItem.payer] +\n          payrollItem.rate *\n            Math.max(0, taxPayer.income - payrollInfo.additionalHIThreshold)\n        taxName = 'HI'\n      }\n\n      // put amount in right place(s) in object\n      // note we're \"unnecessarily\" doubling the size of the object\n      // so we can refer to Object.tax.payer and Object.payer.tax equally easily\n      if (payrollObject[taxName]) {\n        payrollObject[taxName][payrollItem.payer] = payrollTaxAmount\n      } else {\n        payrollObject[taxName] = {\n          [payrollItem.payer]: payrollTaxAmount\n        }\n      }\n      if (payrollObject[payrollItem.payer]) {\n        payrollObject[payrollItem.payer][taxName] = payrollTaxAmount\n      } else {\n        payrollObject[payrollItem.payer] = {\n          [taxName]: payrollTaxAmount\n        }\n      }\n    }\n  })\n\n  // add totals\n  for (const [key, value] of Object.entries(payrollObject)) {\n    let subtotal = 0\n    for (const [key2, value2] of Object.entries(payrollObject[key])) {\n      subtotal = subtotal + value2\n    }\n    payrollObject[key].total = subtotal\n  }\n  payrollObject.total = payrollObject.OASDI.total + payrollObject.HI.total\n\n  return payrollObject\n}\n\nexport { payrollTax }\n","import React, { useState, useEffect } from 'react'\n\nimport { TaxPayer, \n  taxBrackets, \n  standardDeduction, \n  taxValues, \n  marginalRate, \n  taxAmount, \n  effectiveRate, \n  bracketPlot,\n  payrollRates,\n  payrollTax} from '@taxplot/calc'\n\nconst App = () => {\n  const [bracket, setBracket] = useState({  });\n  const [values, setValues] = useState({  });\n  const [payrollInfo, setPayrollRates] = useState({  });\n  const [payrollValues, setPayrollValues] = useState({  });\n  \n  \n  var plotBracket \n  const token='THISISMYTAXPLOTTOKEN'\n  const taxPayer = new TaxPayer({filingStatus: \"MFJ\", income: 300000})\n\n  useEffect(() =>  {\n    const getData = async () => {\n      const bracket = await taxBrackets(token, taxPayer)\n      const payrollInfo = await payrollRates(token, taxPayer, 'BOTH')\n      const taxData = taxValues(bracket, taxPayer)\n      const payrollItems = payrollTax(payrollInfo, taxPayer)\n\n      setBracket(bracket)\n      setValues(taxData)\n      setPayrollRates(payrollInfo)\n      setPayrollValues(payrollItems)\n    }\n    getData()\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[])\n\n \n\n  // let value\n  // taxBrackets(token, someTaxPayer).then(result => value = result)\n  return <div>\n          {JSON.stringify(payrollValues)}\n          {console.log(payrollValues)}\n        </div>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}